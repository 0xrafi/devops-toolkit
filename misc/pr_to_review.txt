Skip to content
Search or jump to…
Pull requests
Issues
Codespaces
Marketplace
Explore
 
@0xrafi 
denotalabs
/
denota
Private
Cannot fork because forking is disabled.
Code
Issues
4
Pull requests
2
Actions
Projects
Wiki
Security
Insights
Settings
Remove references to cheq from frontend #184
 Open
soolaymahn wants to merge 8 commits into main from mbasrai/cheq-rename
+356 −341 
 Conversation 0
 Commits 8
 Checks 1
 Files changed 33
Show file tree Hide file tree
File filter 
 
0 / 33 files viewed
Filter changed files
 0  
contracts/createCheqs.py → contracts/createNotas.py
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
File renamed without changes.
  2  
contracts/deployCheq.py → contracts/deployDenota.py
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -12,7 +12,7 @@
2. Append chain:rpc to environment/ethereum in docker-compose.yml
3. Run python3 deployCheq [privateKey] [chain]
3. Run python3 deployDenota [privateKey] [chain]
4. Run export GQL_HOST=server && export GRAPH_CHAIN=chain && make graph-deploy-remote
(Optionally, add new make command for the chain)
  4  
frontend/components/dashboard/HomeScreen.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -6,7 +6,7 @@ import Cookies from "js-cookie";
import { useBlockchainData } from "../../context/BlockchainDataProvider";
import NewUserModal from "../nux/NewUserModal";
import { WrongChain } from "../WrongChain";
import MyCheqsView from "./MyCheqsView";
import MyNotas from "./MyNotas";
import NewUserScreen from "./NewUserScreen";

function HomeScreen() {
@@ -52,7 +52,7 @@ function HomeScreenContent() {
    <Center flexDirection={"column"} width="100%" p={{ base: "4", lg: "0" }}>
      <NewUserModal isOpen={isNuxOpen} onClose={onCloseNux} />
      <br />
      <MyCheqsView />
      <MyNotas />
    </Center>
  );
}
  32  
...tend/components/dashboard/MyCheqsView.tsx → frontend/components/dashboard/MyNotas.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -12,12 +12,12 @@ import {
} from "@chakra-ui/react";
import { useRouter } from "next/router";
import { MdOutlineAdd } from "react-icons/md";
import { useCheqContext } from "../../context/CheqsContext";
import { Cheq } from "../../hooks/useCheqs";
import CheqCardV2 from "./CheqCardV2";
import { useNotaContext } from "../../context/NotasContext";
import { Nota } from "../../hooks/useNotas";
import NotaCard from "./NotaCard";

function MyCheqsView() {
  const { cheqs, refresh, setCheqField, isLoading } = useCheqContext();
function MyNotas() {
  const { notas, refresh, setNotaField, isLoading } = useNotaContext();

  return (
    <VStack
@@ -34,7 +34,7 @@ function MyCheqsView() {
          minW={0}
          w="120px"
          onChange={(event) => {
            setCheqField(event.target.value);
            setNotaField(event.target.value);
          }}
          focusBorderColor="clear"
        >
@@ -50,32 +50,32 @@ function MyCheqsView() {
        />
      </HStack>

      <CheqGrid cheqs={isLoading ? undefined : cheqs} />
      <MyNotasGrid notas={isLoading ? undefined : notas} />
    </VStack>
  );
}

interface CheqGridProps {
  cheqs: Cheq[] | undefined;
interface GridProps {
  notas: Nota[] | undefined;
}

function CheqGrid({ cheqs }: CheqGridProps) {
function MyNotasGrid({ notas }: GridProps) {
  const router = useRouter();

  if (cheqs === undefined) {
  if (notas === undefined) {
    return (
      <Center flexDirection={"column"} w="100%" px={5}>
        <Spinner size="xl" />
      </Center>
    );
  }

  if (cheqs.length === 0) {
  if (notas.length === 0) {
    return (
      <Center>
        <Text fontWeight={600} fontSize={"xl"} textAlign="center" pb={6}>
          <Button
            bg="cheqPurple.100"
            bg="notaPurple.100"
            w="min(40vw, 200px)"
            onClick={() => {
              router.push("/send", undefined, { shallow: true });
@@ -105,11 +105,11 @@ function CheqGrid({ cheqs }: CheqGridProps) {
      borderRadius="10px"
      p={{ md: "0", lg: "4" }}
    >
      {cheqs.map((cheq) => {
        return <CheqCardV2 key={cheq.id} cheq={cheq} />;
      {notas.map((nota) => {
        return <NotaCard key={nota.id} nota={nota} />;
      })}
    </Grid>
  );
}

export default MyCheqsView;
export default MyNotas;
  70  
frontend/components/dashboard/CheqCardV2.tsx → frontend/components/dashboard/NotaCard.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -24,16 +24,16 @@ import {
  MdOutlineHourglassEmpty,
  MdOutlineLock,
} from "react-icons/md";
import { useCashCheq } from "../../hooks/useCashCheq";
import { Cheq } from "../../hooks/useCheqs";
import { useCashNota } from "../../hooks/useCashNota";
import { useCurrencyDisplayName } from "../../hooks/useCurrencyDisplayName";
import { useFormatAddress } from "../../hooks/useFormatAddress";
import { Nota } from "../../hooks/useNotas";
import CurrencyIcon from "../designSystem/CurrencyIcon";
import DetailsModal from "./details/DetailsModal";
import ApproveAndPayModal from "./pay/ApproveAndPayModal";

interface Props {
  cheq: Cheq;
  nota: Nota;
}

const TOOLTIP_MESSAGE_MAP = {
@@ -47,7 +47,7 @@ const TOOLTIP_MESSAGE_MAP = {
  awaiting_escrow: "waiting for payer to escrow funds",
};

function CheqCardV2({ cheq }: Props) {
function NotaCard({ nota }: Props) {
  const hashCode = (s: string) =>
    s.split("").reduce((a, b) => {
      a = (a << 5) - a + b.charCodeAt(0);
@@ -64,15 +64,15 @@ function CheqCardV2({ cheq }: Props) {
    ["#6D4C41", "#E6B8B89F"],
  ];

  const generateCheqGradient = (cheq: Cheq): string => {
    const { id, amount, sender, receiver } = cheq;
  const generateNotaGradient = (nota: Nota): string => {
    const { id, amount, sender, receiver } = nota;
    const hash = hashCode(`${id}${amount}${sender}${receiver}`);
    const colorIndex = Math.abs(hash) % GRADIENT_COLORS.length;
    const [startColor, endColor] = GRADIENT_COLORS[colorIndex];
    return `linear-gradient(180deg, ${startColor}, ${endColor})`;
  };

  const { createdTransaction } = cheq;
  const { createdTransaction } = nota;

  const createdLocaleDate = useMemo(() => {
    return createdTransaction.date.toLocaleDateString();
@@ -92,7 +92,7 @@ function CheqCardV2({ cheq }: Props) {
  const { formatAddress } = useFormatAddress();

  const icon = useMemo(() => {
    switch (cheq.moduleData.status) {
    switch (nota.moduleData.status) {
      case "paid":
        return <MdOutlineDoneAll color="white" size={20} />;
      case "payable":
@@ -110,10 +110,10 @@ function CheqCardV2({ cheq }: Props) {
      default:
        return <MdOutlineHourglassEmpty color="white" size={20} />;
    }
  }, [cheq.moduleData.status]);
  }, [nota.moduleData.status]);

  const iconColor = useMemo(() => {
    switch (cheq.moduleData.status) {
    switch (nota.moduleData.status) {
      case "paid":
        return "#00C28E";
      case "released":
@@ -131,36 +131,36 @@ function CheqCardV2({ cheq }: Props) {
      default:
        return "#4A67ED";
    }
  }, [cheq.moduleData.status]);
  const gradient = generateCheqGradient(cheq);
  }, [nota.moduleData.status]);
  const gradient = generateNotaGradient(nota);

  const { displayNameForCurrency } = useCurrencyDisplayName();

  const [cashingInProgress, setCashingInProgress] = useState(false);

  const { cashCheq } = useCashCheq();
  const { cash: cash } = useCashNota();

  const handleRelease = useCallback(async () => {
    setCashingInProgress(true);
    await cashCheq({
      cheqId: cheq.id,
      amountWei: cheq.amountRaw,
      to: cheq.payee,
    await cash({
      notaId: nota.id,
      amountWei: nota.amountRaw,
      to: nota.payee,
      message: "Payment released",
    });
    setCashingInProgress(false);
  }, [cashCheq, cheq.amountRaw, cheq.id, cheq.payee]);
  }, [cash, nota.amountRaw, nota.id, nota.payee]);

  const handleVoid = useCallback(async () => {
    setCashingInProgress(true);
    await cashCheq({
      cheqId: cheq.id,
      amountWei: cheq.amountRaw,
      to: cheq.payer,
    await cash({
      notaId: nota.id,
      amountWei: nota.amountRaw,
      to: nota.payer,
      message: "Payment voided",
    });
    setCashingInProgress(false);
  }, [cashCheq, cheq.amountRaw, cheq.id, cheq.payer]);
  }, [cash, nota.amountRaw, nota.id, nota.payer]);

  return (
    <GridItem bg={gradient} px={6} pt={4} pb={3} borderRadius={20}>
@@ -182,7 +182,7 @@ function CheqCardV2({ cheq }: Props) {
              {createdLocaleDate}
            </Text>
            <Tooltip
              label={TOOLTIP_MESSAGE_MAP[cheq.moduleData.status]}
              label={TOOLTIP_MESSAGE_MAP[nota.moduleData.status]}
              aria-label="status tooltip"
              placement="bottom"
              bg="brand.100"
@@ -206,7 +206,7 @@ function CheqCardV2({ cheq }: Props) {
              textOverflow="clip"
              noOfLines={1}
            >
              {formatAddress(cheq.payer)}
              {formatAddress(nota.payer)}
            </Text>
            <ArrowForwardIcon mx={2} />
            <Text
@@ -215,27 +215,27 @@ function CheqCardV2({ cheq }: Props) {
              textOverflow="clip"
              noOfLines={1}
            >
              {formatAddress(cheq.payee)}
              {formatAddress(nota.payee)}
            </Text>
          </HStack>

          <HStack>
            <Text fontWeight={400} fontSize={"xl"} my={0}>
              {cheq.amount}{" "}
              {displayNameForCurrency(cheq.token, cheq.sourceChainHex)}
              {nota.amount}{" "}
              {displayNameForCurrency(nota.token, nota.sourceChainHex)}
            </Text>

            <CurrencyIcon
              currency={cheq.token}
              sourceChainHex={cheq.sourceChainHex}
              currency={nota.token}
              sourceChainHex={nota.sourceChainHex}
            />
          </HStack>
        </Flex>

        <VStack alignItems="flex-start" w="100%">
          <Center w="100%">
            <ButtonGroup>
              {cheq.moduleData.status === "payable" ? (
              {nota.moduleData.status === "payable" ? (
                <Button
                  variant="outline"
                  w="min(40vw, 100px)"
@@ -246,7 +246,7 @@ function CheqCardV2({ cheq }: Props) {
                  Pay
                </Button>
              ) : null}
              {cheq.moduleData.status === "releasable" ? (
              {nota.moduleData.status === "releasable" ? (
                <Menu>
                  <MenuButton disabled={cashingInProgress} as={Button} minW={0}>
                    Options {cashingInProgress ? <Spinner size="xs" /> : null}
@@ -272,11 +272,11 @@ function CheqCardV2({ cheq }: Props) {
      <DetailsModal
        isOpen={isDetailsOpen}
        onClose={onCloseDetails}
        cheq={cheq}
        nota={nota}
      />
      <ApproveAndPayModal isOpen={isPayOpen} onClose={onClosePay} cheq={cheq} />
      <ApproveAndPayModal isOpen={isPayOpen} onClose={onClosePay} nota={nota} />
    </GridItem>
  );
}

export default CheqCardV2;
export default NotaCard;
 17  
frontend/components/dashboard/details/DetailsModal.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -1,31 +1,34 @@
import { Center, HStack } from "@chakra-ui/react";
import { useBlockchainData } from "../../../context/BlockchainDataProvider";
import { MUMBAI_ADDRESS } from "../../../context/chainInfo";
import { Cheq } from "../../../hooks/useCheqs";
import { Nota } from "../../../hooks/useNotas";
import SimpleModal from "../../designSystem/SimpleModal";
import CheqDetails from "./CheqDetails";
import NotaDetails from "./NotaDetails";
import ShareToLensButton from "./ShareToLensButton";
import ViewOnOpenSeaButton from "./ViewOnOpenSeaButton";

interface Props {
  isOpen: boolean;
  onClose: () => void;
  cheq: Cheq;
  nota: Nota;
}

function DetailsModal(props: Props) {
  const { blockchainState } = useBlockchainData();
  const { explorer, chainId, registrarAddress } = blockchainState;
  const { cheq } = props;
  const { nota } = props;
  return (
    <SimpleModal {...props}>
      <CheqDetails cheq={cheq} />
      <NotaDetails nota={props.nota} />
      {chainId === MUMBAI_ADDRESS && (
        <Center>
          <HStack spacing={4}>
            <ViewOnOpenSeaButton id={cheq.id} registrarAddress={registrarAddress} />
            <ViewOnOpenSeaButton
              id={nota.id}
              registrarAddress={registrarAddress}
            />
            <ShareToLensButton
              text={`I just created a nota payment NFT! View my nota here: ${explorer}${props.cheq.createdTransaction.hash}`}
              text={`I just created a nota payment NFT! View my nota here: ${explorer}${props.nota.createdTransaction.hash}`}
              url="https://denota.xyz"
              via="denota"
            />
  66  
...ponents/dashboard/details/CheqDetails.tsx → ...ponents/dashboard/details/NotaDetails.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -4,18 +4,18 @@ import axios from "axios";
import Image from "next/image";
import { useEffect, useMemo, useState } from "react";
import { useBlockchainData } from "../../../context/BlockchainDataProvider";
import { Cheq } from "../../../hooks/useCheqs";
import { useCurrencyDisplayName } from "../../../hooks/useCurrencyDisplayName";
import { useFormatAddress } from "../../../hooks/useFormatAddress";
import { CheqCurrency } from "../../designSystem/CurrencyIcon";
import { Nota } from "../../../hooks/useNotas";
import { NotaCurrency } from "../../designSystem/CurrencyIcon";
import DetailsRow from "../../designSystem/DetailsRow";
import RoundedBox from "../../designSystem/RoundedBox";

interface Props {
  cheq: Cheq;
  nota: Nota;
}

function CheqDetails({ cheq }: Props) {
function NotaDetails({ nota }: Props) {
  const { blockchainState } = useBlockchainData();
  const { explorer } = blockchainState;
  const [note, setNote] = useState<string | undefined>(undefined);
@@ -28,8 +28,8 @@ function CheqDetails({ cheq }: Props) {
  useEffect(() => {
    async function fetchData() {
      try {
        if (cheq.uri) {
          const NOTE_URL = `https://gateway.lighthouse.storage/ipfs/${cheq.uri}`;
        if (nota.uri) {
          const NOTE_URL = `https://gateway.lighthouse.storage/ipfs/${nota.uri}`;
          const resp = await axios.get(NOTE_URL);
          setNote(resp.data.description);
          setTags(resp.data.tags);
@@ -50,25 +50,25 @@ function CheqDetails({ cheq }: Props) {
      }
    }
    fetchData();
  }, [cheq.uri]);
  }, [nota.uri]);

  const { displayNameForCurrency } = useCurrencyDisplayName();
  const { formatAddress } = useFormatAddress();

  const moduleName = useMemo(() => {
    switch (cheq.moduleData.module) {
    switch (nota.moduleData.module) {
      case "escrow":
        return "Escrow";
      case "direct":
        return "Direct Pay";
    }
  }, [cheq.moduleData.module]);
  }, [nota.moduleData.module]);

  return (
    <VStack gap={4} mt={10} mb={6}>
      <RoundedBox px={6}>
        <VStack gap={0}>
          {cheq.isCrossChain && (
          {nota.isCrossChain && (
            <VStack mt={2}>
              <Image
                src="/logos/axelar-logo.svg"
@@ -83,52 +83,52 @@ function CheqDetails({ cheq }: Props) {
              <Text mt={3}>Powered by Axelar</Text>
            </VStack>
          )}
          {cheq.sourceChainName && (
            <DetailsRow title="Source Chain" value={cheq.sourceChainName} />
          {nota.sourceChainName && (
            <DetailsRow title="Source Chain" value={nota.sourceChainName} />
          )}
          {cheq.destChain && (
            <DetailsRow title="Destination Chain" value={cheq.destChain} />
          {nota.destChain && (
            <DetailsRow title="Destination Chain" value={nota.destChain} />
          )}
          <DetailsRow
            title="Payer"
            value={formatAddress(cheq.payer)}
            copyValue={!cheq.isPayer ? cheq.payer : undefined}
            value={formatAddress(nota.payer)}
            copyValue={!nota.isPayer ? nota.payer : undefined}
          />
          <DetailsRow
            title="Recipient"
            value={formatAddress(cheq.payee)}
            copyValue={!cheq.isPayer ? undefined : cheq.payee}
            value={formatAddress(nota.payee)}
            copyValue={!nota.isPayer ? undefined : nota.payee}
          />
          {cheq.inspector && (
          {nota.inspector && (
            <DetailsRow
              title="Inspector"
              value={formatAddress(cheq.inspector)}
              copyValue={!cheq.isInspector ? undefined : cheq.payee}
              value={formatAddress(nota.inspector)}
              copyValue={!nota.isInspector ? undefined : nota.payee}
            />
          )}
          {cheq.dueDate && cheq.isInvoice && (
            <DetailsRow title="Due Date" value={cheq.dueDate.toDateString()} />
          {nota.dueDate && nota.isInvoice && (
            <DetailsRow title="Due Date" value={nota.dueDate.toDateString()} />
          )}
          <DetailsRow
            title="Created On"
            value={cheq.createdTransaction.date.toDateString()}
            link={`${explorer}${cheq.createdTransaction.hash}`}
            value={nota.createdTransaction.date.toDateString()}
            link={`${explorer}${nota.createdTransaction.hash}`}
          />
          {cheq.fundedTransaction && (
          {nota.fundedTransaction && (
            <DetailsRow
              title="Funded Date"
              value={cheq.fundedTransaction.date.toDateString()}
              link={`${explorer}${cheq.fundedTransaction.hash}`}
              value={nota.fundedTransaction.date.toDateString()}
              link={`${explorer}${nota.fundedTransaction.hash}`}
            />
          )}
          <DetailsRow
            title="Payment Amount"
            value={
              String(cheq.amount) +
              String(nota.amount) +
              " " +
              displayNameForCurrency(
                cheq.token as CheqCurrency,
                cheq.sourceChainHex
                nota.token as NotaCurrency,
                nota.sourceChainHex
              )
            }
          />
@@ -139,7 +139,7 @@ function CheqDetails({ cheq }: Props) {
          />
        </VStack>
      </RoundedBox>
      {cheq.uri &&
      {nota.uri &&
        (!isLoading ? (
          <>
            {note && (
@@ -191,4 +191,4 @@ function CheqDetails({ cheq }: Props) {
  );
}

export default CheqDetails;
export default NotaDetails;
  61  
frontend/components/dashboard/pay/ApproveAndPay.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -2,19 +2,19 @@ import { Box, Text, useToast } from "@chakra-ui/react";
import { BigNumber, ethers } from "ethers";
import { useCallback, useEffect, useMemo, useState } from "react";
import { useBlockchainData } from "../../../context/BlockchainDataProvider";
import { useCheqContext } from "../../../context/CheqsContext";
import { Cheq } from "../../../hooks/useCheqs";
import { useNotaContext } from "../../../context/NotasContext";
import { Nota } from "../../../hooks/useNotas";
import RoundedBox from "../../designSystem/RoundedBox";
import RoundedButton from "../../designSystem/RoundedButton";

interface Props {
  cheq: Cheq;
  nota: Nota;
  onClose: () => void;
}

function ApproveAndPay({ cheq, onClose }: Props) {
  // TODO: support optimistic updates in useCheqs
  const { refreshWithDelay } = useCheqContext();
function ApproveAndPay({ nota, onClose }: Props) {
  // TODO: support optimistic updates in useNotas
  const { refreshWithDelay } = useNotaContext();

  const toast = useToast();

@@ -25,18 +25,18 @@ function ApproveAndPay({ cheq, onClose }: Props) {
  const [isLoading, setIsLoading] = useState(false);

  const token = useMemo(() => {
    switch (cheq.token) {
    switch (nota.token) {
      case "DAI":
        return blockchainState.dai;
      case "WETH":
        return blockchainState.weth;
      default:
        return null;
    }
  }, [blockchainState.dai, blockchainState.weth, cheq.token]);
  }, [blockchainState.dai, blockchainState.weth, nota.token]);

  const tokenAddress = useMemo(() => {
    switch (cheq.token) {
    switch (nota.token) {
      case "DAI":
        return blockchainState.dai?.address ?? "";
      case "WETH":
@@ -46,10 +46,10 @@ function ApproveAndPay({ cheq, onClose }: Props) {
      default:
        return "";
    }
  }, [blockchainState.dai?.address, blockchainState.weth?.address, cheq.token]);
  }, [blockchainState.dai?.address, blockchainState.weth?.address, nota.token]);

  const tokenBalance = useMemo(() => {
    switch (cheq.token) {
    switch (nota.token) {
      case "DAI":
        return blockchainState.userDaiBalanceRaw;
      case "WETH":
@@ -63,12 +63,12 @@ function ApproveAndPay({ cheq, onClose }: Props) {
    blockchainState.userDaiBalanceRaw,
    blockchainState.userWethBalanceRaw,
    blockchainState.walletBalanceRaw,
    cheq.token,
    nota.token,
  ]);

  const insufficientBalance = useMemo(() => {
    return cheq.amountRaw.sub(tokenBalance) > BigNumber.from(0);
  }, [cheq.amountRaw, tokenBalance]);
    return nota.amountRaw.sub(tokenBalance) > BigNumber.from(0);
  }, [nota.amountRaw, tokenBalance]);

  useEffect(() => {
    const fetchAllowance = async () => {
@@ -79,7 +79,7 @@ function ApproveAndPay({ cheq, onClose }: Props) {
          blockchainState.account,
          blockchainState.registrarAddress
        );
        if (cheq.amountRaw.sub(tokenAllowance[0]) > BigNumber.from(0)) {
        if (nota.amountRaw.sub(tokenAllowance[0]) > BigNumber.from(0)) {
          setNeedsApproval(true);
        } else {
          setNeedsApproval(false);
@@ -90,7 +90,7 @@ function ApproveAndPay({ cheq, onClose }: Props) {
  }, [
    blockchainState.account,
    blockchainState.registrarAddress,
    cheq.amountRaw,
    nota.amountRaw,
    token,
    token?.functions,
  ]);
@@ -100,10 +100,10 @@ function ApproveAndPay({ cheq, onClose }: Props) {
      return "Insufficient funds";
    }
    if (needsApproval) {
      return "Approve " + cheq.token;
      return "Approve " + nota.token;
    }
    return "Pay";
  }, [cheq.token, insufficientBalance, needsApproval]);
  }, [nota.token, insufficientBalance, needsApproval]);

  const handlePay = useCallback(async () => {
    setIsLoading(true);
@@ -116,13 +116,13 @@ function ApproveAndPay({ cheq, onClose }: Props) {
        // );
        const tx = await token?.functions.approve(
          blockchainState.registrarAddress,
          cheq.amountRaw
          nota.amountRaw
        );
        await tx.wait();
        setNeedsApproval(false);
      } else {
        const cheqId = Number(cheq.id);
        const amount = BigNumber.from(cheq.amountRaw);
        const notaId = Number(nota.id);
        const amount = BigNumber.from(nota.amountRaw);
        const msgValue =
          tokenAddress === "0x0000000000000000000000000000000000000000"
            ? amount
@@ -132,11 +132,11 @@ function ApproveAndPay({ cheq, onClose }: Props) {
          [blockchainState.account]
        );

        const instantAmount = cheq.moduleData.module === "direct" ? amount : 0;
        const escrowAmount = cheq.moduleData.module === "escrow" ? amount : 0;
        const instantAmount = nota.moduleData.module === "direct" ? amount : 0;
        const escrowAmount = nota.moduleData.module === "escrow" ? amount : 0;

        const tx = await blockchainState.cheq?.fund(
          cheqId,
        const tx = await blockchainState.registrar?.fund(
          notaId,
          escrowAmount, // escrow
          instantAmount, // instant
          payload,
@@ -166,10 +166,11 @@ function ApproveAndPay({ cheq, onClose }: Props) {
    }
  }, [
    blockchainState.account,
    blockchainState.cheq,
    blockchainState.registrar,
    blockchainState.registrarAddress,
    cheq.amountRaw,
    cheq.id,
    nota.amountRaw,
    nota.id,
    nota.moduleData.module,
    needsApproval,
    onClose,
    refreshWithDelay,
@@ -179,13 +180,13 @@ function ApproveAndPay({ cheq, onClose }: Props) {
  ]);

  const moduleInfo = useMemo(() => {
    switch (cheq.moduleData.module) {
    switch (nota.moduleData.module) {
      case "direct":
        return "Funds will be released immediately";
      case "escrow":
        return "Funds will be held in escrow";
    }
  }, [cheq.moduleData.module]);
  }, [nota.moduleData.module]);

  return (
    <Box w="100%" p={4}>
 6  
frontend/components/dashboard/pay/ApproveAndPayModal.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -1,17 +1,17 @@
import { Cheq } from "../../../hooks/useCheqs";
import { Nota } from "../../../hooks/useNotas";
import SimpleModal from "../../designSystem/SimpleModal";
import ApproveAndPay from "./ApproveAndPay";

interface Props {
  isOpen: boolean;
  onClose: () => void;
  cheq: Cheq;
  nota: Nota;
}

function ApproveAndPayModal(props: Props) {
  return (
    <SimpleModal {...props}>
      <ApproveAndPay cheq={props.cheq} onClose={props.onClose}></ApproveAndPay>
      <ApproveAndPay nota={props.nota} onClose={props.onClose}></ApproveAndPay>
    </SimpleModal>
  );
}
 0  
.../components/dashboard/table/CheqTable.tsx → .../components/dashboard/table/NotaTable.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
File renamed without changes.
  4  
frontend/components/designSystem/CurrencyIcon.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -2,7 +2,7 @@ import { Image } from "@chakra-ui/react";
import { useBlockchainData } from "../../context/BlockchainDataProvider";
import { deployedChains } from "../../context/chainInfo";

export type CheqCurrency = "DAI" | "USDC" | "WETH" | "USDT" | "NATIVE";
export type NotaCurrency = "DAI" | "USDC" | "WETH" | "USDT" | "NATIVE";

type URLKey = "MATIC" | "CELO" | "USDC" | "DAI" | "WETH" | "USDT";

@@ -16,7 +16,7 @@ const URL_MAP = {
};

interface Props {
  currency: CheqCurrency;
  currency: NotaCurrency;
  sourceChainHex?: string;
}

  4  
frontend/components/write/WriteCheqFlow.tsx → frontend/components/write/WriteFlow.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -12,7 +12,7 @@ interface Props {
  isInvoice: boolean;
}

export function WriteCheqFlow({ onClose, isInvoice }: Props) {
export function WriteFlow({ onClose, isInvoice }: Props) {
  return (
    <NotaFormProvider>
      <VStack
@@ -97,4 +97,4 @@ export function WriteStepperMobile({ onClose, isInvoice }: Props) {
  );
}

export default WriteCheqFlow;
export default WriteFlow;
  4  
frontend/components/write/confirm/ConfirmDetails.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -2,7 +2,7 @@ import { VStack } from "@chakra-ui/react";
import { useNotaForm } from "../../../context/NotaFormProvider";
import { useCurrencyDisplayName } from "../../../hooks/useCurrencyDisplayName";
import { useFormatAddress } from "../../../hooks/useFormatAddress";
import { CheqCurrency } from "../../designSystem/CurrencyIcon";
import { NotaCurrency } from "../../designSystem/CurrencyIcon";
import DetailsRow from "../../designSystem/DetailsRow";
import RoundedBox from "../../designSystem/RoundedBox";

@@ -28,7 +28,7 @@ function ConfirmDetails({ isInvoice }: Props) {
          value={
            notaFormValues.amount +
            " " +
            displayNameForCurrency(notaFormValues.token as CheqCurrency)
            displayNameForCurrency(notaFormValues.token as NotaCurrency)
          }
        />
        {notaFormValues.module === "direct" && isInvoice && (
  4  
frontend/components/write/confirm/ConfirmStep.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -14,7 +14,7 @@ interface Props extends ScreenProps {
  isInvoice: boolean;
}

const CheqConfirmStep: React.FC<Props> = ({ isInvoice }: Props) => {
const ConfirmStep: React.FC<Props> = ({ isInvoice }: Props) => {
  const { notaFormValues } = useNotaForm();
  const { needsApproval, approveAmount, writeNota } = useConfirmNota({
    onSuccess: () => {
@@ -66,4 +66,4 @@ const CheqConfirmStep: React.FC<Props> = ({ isInvoice }: Props) => {
  );
};

export default CheqConfirmStep;
export default ConfirmStep;
  10  
frontend/components/write/details/CurrencySelectorField.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -10,12 +10,12 @@ import { Field, FieldProps } from "formik";

import { useCurrencyDisplayName } from "../../../hooks/useCurrencyDisplayName";
import useDemoMode from "../../../hooks/useDemoMode";
import CurrencyIcon, { CheqCurrency } from "../../designSystem/CurrencyIcon";
import CurrencyIcon, { NotaCurrency } from "../../designSystem/CurrencyIcon";
import { TokenChoice } from "../../designSystem/TokenChoice";

interface CurrencySelectorProps {
  setFieldValue: (field: string, value: CheqCurrency) => void;
  value: CheqCurrency;
  setFieldValue: (field: string, value: NotaCurrency) => void;
  value: NotaCurrency;
}

export function CurrencySelectorField() {
@@ -39,7 +39,7 @@ export function CurrencySelectorField() {

function CurrencySelector({ setFieldValue, value }: CurrencySelectorProps) {
  const isDemoMode = useDemoMode();
  let options: CheqCurrency[];
  let options: NotaCurrency[];
  // TODO add support for USDT, etc (and NFTs)
  isDemoMode
    ? (options = ["NATIVE", "DAI", "USDC", "USDT", "WETH"])
@@ -48,7 +48,7 @@ function CurrencySelector({ setFieldValue, value }: CurrencySelectorProps) {
  const { getRootProps, getRadioProps } = useRadioGroup({
    name: "framework",
    defaultValue: value,
    onChange: (val: CheqCurrency) => {
    onChange: (val: NotaCurrency) => {
      setFieldValue("token", val);
    },
  });
  2  
frontend/components/write/metadata/MetadataStep.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -87,7 +87,7 @@ const MetadataStep: React.FC<ScreenProps> = () => {
                  py={2}
                  onChange={(e) => setHasConsented(e.target.checked)}
                >
                  I agree to Cheq's{" "}
                  I agree to Denota's{" "}
                  <Link
                    isExternal
                    textDecoration={"underline"}
  2  
frontend/components/write/module/DirectPayTerms.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -62,7 +62,7 @@ export function DirectPayTerms({ isInvoice }: Props) {
              <Field name="axelarEnabled">
                {({ field }: FieldProps) => (
                  <Checkbox defaultChecked={field.value} {...field}>
                    <Text fontSize="lg" color="cheqPurple.100">
                    <Text fontSize="lg" color="notaPurple.100">
                      Mint cross-chain on Polygon with Axelar
                    </Text>
                  </Checkbox>
  4  
frontend/components/write/module/MilestoneTerms.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -14,7 +14,7 @@ import { useFormikContext } from "formik";
import { useCallback, useEffect } from "react";
import { useNotaForm } from "../../../context/NotaFormProvider";
import { useCurrencyDisplayName } from "../../../hooks/useCurrencyDisplayName";
import { CheqCurrency } from "../../designSystem/CurrencyIcon";
import { NotaCurrency } from "../../designSystem/CurrencyIcon";
import { PaymentTermsFormValues } from "./PaymentTermsStep";

export function MilestoneTerms() {
@@ -72,7 +72,7 @@ export function MilestoneTerms() {
      })}
      <Text textAlign="right" textColor={errors.milestones ? "red" : undefined}>
        Total amount must add up to {notaFormValues.amount}{" "}
        {displayNameForCurrency(notaFormValues.token as CheqCurrency)}
        {displayNameForCurrency(notaFormValues.token as NotaCurrency)}
      </Text>
      <FormControl>
        <FormLabel noOfLines={1} flexShrink={0} mb={3}>
  7  
frontend/components/write/moduleSelect/ModuleSelectStep.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -21,11 +21,10 @@ interface Props extends ScreenProps {
  showTerms: boolean;
}

const CheqModuleSelectStep: React.FC<Props> = ({ showTerms }) => {
  const isDemoMode = useDemoMode();

const ModuleSelectStep: React.FC<Props> = ({ showTerms }) => {
  const { next } = useStep();
  const { updateNotaFormValues, notaFormValues } = useNotaForm();
  const isDemoMode = useDemoMode();

  const currentDate = useMemo(() => {
    const d = new Date();
@@ -163,4 +162,4 @@ const CheqModuleSelectStep: React.FC<Props> = ({ showTerms }) => {
  );
};

export default CheqModuleSelectStep;
export default ModuleSelectStep;
  10  
frontend/context/BlockchainDataProvider.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -12,6 +12,7 @@ import { SafeAppWeb3Modal } from "@safe-global/safe-apps-web3modal";
import { BigNumber, ethers } from "ethers";

import BridgeSender from "../frontend-abi/BridgeSender.sol/BridgeSender.json";
// TODO: remove references to cheq from contracts
import CheqRegistrar from "../frontend-abi/CheqRegistrar.sol/CheqRegistrar.json";
import erc20 from "../frontend-abi/ERC20.sol/TestERC20.json";
import {
@@ -31,7 +32,7 @@ interface BlockchainDataInterface {
  registrarAddress: string;
  userDaiBalance: string;
  userWethBalance: string;
  cheq: null | ethers.Contract;
  registrar: null | ethers.Contract;
  directPayAddress: string;
  escrowAddress: string;
  signer: null | ethers.providers.JsonRpcSigner;
@@ -55,7 +56,7 @@ interface BlockchainDataContextInterface {

const defaultBlockchainState = {
  account: "",
  cheq: null,
  registrar: null,
  dai: null,
  weth: null,
  axelarBridgeSender: null,
@@ -136,8 +137,7 @@ export const BlockchainDataProvider = memo(
        } else {
          // Load contracts
          const firstBlockExplorer = deployedChainInfo.blockExplorerUrls[0];

          const cheq = new ethers.Contract(
          const registrar = new ethers.Contract(
            contractMapping.registrar,
            CheqRegistrar.abi,
            signer
@@ -185,7 +185,7 @@ export const BlockchainDataProvider = memo(
            userDaiBalance: ethers.utils.formatUnits(userDaiBalance),
            userWethBalance: ethers.utils.formatUnits(userWethBalance),
            explorer: firstBlockExplorer,
            cheq,
            registrar,
            directPayAddress: contractMapping.directPay,
            chainId: chainNumberToChainHex(chainId),
            graphUrl: deployedChainInfo.graphUrl, // Change from graphUrlto graphTestUrl for testing a local graph node
 68  
frontend/context/CheqsContext.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
This file was deleted.

 74  
frontend/context/NotasContext.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -0,0 +1,74 @@
import {
  createContext,
  useCallback,
  useContext,
  useMemo,
  useState,
} from "react";
import { Nota, useNotas } from "../hooks/useNotas";

interface NotasContextInterface {
  notas: Nota[] | undefined;
  refresh: () => void;
  refreshWithDelay: () => void;
  isLoading: boolean;
  setNotaField: (notaField: string) => void;
}

export const NotaContext = createContext<NotasContextInterface>({
  notas: [],
  refresh: () => {
    return;
  },
  isLoading: false,
  setNotaField: () => {
    return;
  },
  refreshWithDelay: () => {
    return;
  },
});

export const NotasProvider = ({ children }: { children: React.ReactNode }) => {
  const [notaField, setNotaFieldInternal] = useState("all");
  const [isLoadingInternal, setIsLoadingInternal] = useState(false);

  const { notas, refresh } = useNotas({ notaField: notaField });

  const setNotaField = useCallback((notaField: string) => {
    setNotaFieldInternal(notaField);
  }, []);

  const refreshWithDelay = useCallback(() => {
    setIsLoadingInternal(true);
    setTimeout(() => {
      refresh();
      setIsLoadingInternal(false);
    }, 3000);
  }, [refresh]);

  const isLoading = useMemo(() => {
    if (notas === undefined) {
      return true;
    }
    return isLoadingInternal;
  }, [notas, isLoadingInternal]);

  return (
    <NotaContext.Provider
      value={{
        notas,
        refresh,
        isLoading,
        setNotaField,
        refreshWithDelay,
      }}
    >
      {children}
    </NotaContext.Provider>
  );
};

export function useNotaContext() {
  return useContext(NotaContext);
}
  4  
frontend/hooks/modules/useAxelarBridge.ts
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -20,7 +20,7 @@ interface Props {
export const useAxelarBridge = () => {
  const { blockchainState } = useBlockchainData();

  const writeCheq = useCallback(
  const write = useCallback(
    async ({ tokenAddress, amountWei, address, ipfsHash, imageUrl }: Props) => {
      const api = new AxelarQueryAPI({ environment: Environment.TESTNET });

@@ -55,5 +55,5 @@ export const useAxelarBridge = () => {
    [blockchainState.axelarBridgeSender]
  );

  return { writeCheq };
  return { write };
};
  8  
frontend/hooks/modules/useDirectPay.ts
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -16,7 +16,7 @@ interface Props {
export const useDirectPay = () => {
  const { blockchainState } = useBlockchainData();

  const writeCheq = useCallback(
  const write = useCallback(
    async ({
      dueDate,
      tokenAddress,
@@ -60,7 +60,7 @@ export const useDirectPay = () => {
          ? instantWei
          : BigNumber.from(0);

      const tx = await blockchainState.cheq?.write(
      const tx = await blockchainState.registrar?.write(
        tokenAddress, //currency
        0, //escrowed
        instantWei, //instant
@@ -74,10 +74,10 @@ export const useDirectPay = () => {
    },
    [
      blockchainState.account,
      blockchainState.cheq,
      blockchainState.registrar,
      blockchainState.directPayAddress,
    ]
  );

  return { writeCheq };
  return { write };
};
  8  
frontend/hooks/modules/useEscrow.ts
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -16,7 +16,7 @@ interface Props {
export const useEscrow = () => {
  const { blockchainState } = useBlockchainData();

  const writeCheq = useCallback(
  const write = useCallback(
    async ({
      tokenAddress,
      amountWei,
@@ -47,7 +47,7 @@ export const useEscrow = () => {
          ? escrowedWei
          : BigNumber.from(0);

      const tx = await blockchainState.cheq?.write(
      const tx = await blockchainState.registrar?.write(
        tokenAddress, //currency
        escrowedWei, //escrowed
        0, //instant
@@ -61,10 +61,10 @@ export const useEscrow = () => {
    },
    [
      blockchainState.account,
      blockchainState.cheq,
      blockchainState.registrar,
      blockchainState.escrowAddress,
    ]
  );

  return { writeCheq };
  return { write };
};
  25  
frontend/hooks/useCashCheq.tsx → frontend/hooks/useCashNota.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -2,30 +2,30 @@ import { useToast } from "@chakra-ui/react";
import { BigNumber, ethers } from "ethers";
import { useCallback } from "react";
import { useBlockchainData } from "../context/BlockchainDataProvider";
import { useCheqContext } from "../context/CheqsContext";
import { useNotaContext } from "../context/NotasContext";

interface Props {
  cheqId: string;
  notaId: string;
  amountWei: BigNumber;
  to: string;
  message: string;
}

export const useCashCheq = () => {
export const useCashNota = () => {
  const { blockchainState } = useBlockchainData();
  const toast = useToast();
  const { refreshWithDelay } = useCheqContext();
  const { refreshWithDelay } = useNotaContext();

  const cashCheq = useCallback(
    async ({ cheqId, amountWei, to, message }: Props) => {
  const cash = useCallback(
    async ({ notaId, amountWei, to, message }: Props) => {
      try {
        const payload = ethers.utils.defaultAbiCoder.encode(
          ["address"],
          [blockchainState.account]
        );

        const tx = await blockchainState.cheq?.cash(
          cheqId,
        const tx = await blockchainState.registrar?.cash(
          notaId,
          amountWei,
          to,
          payload
@@ -49,8 +49,13 @@ export const useCashCheq = () => {
        });
      }
    },
    [blockchainState.account, blockchainState.cheq, toast]
    [
      blockchainState.account,
      blockchainState.registrar,
      refreshWithDelay,
      toast,
    ]
  );

  return { cashCheq };
  return { cash };
};
  20  
frontend/hooks/useConfirmNota.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -2,8 +2,8 @@ import { useToast } from "@chakra-ui/react";
import { BigNumber, ethers } from "ethers";
import { useCallback, useEffect, useMemo, useState } from "react";
import { useBlockchainData } from "../context/BlockchainDataProvider";
import { useCheqContext } from "../context/CheqsContext";
import { useNotaForm } from "../context/NotaFormProvider";
import { useNotaContext } from "../context/NotasContext";
import { useAxelarBridge } from "./modules/useAxelarBridge";
import { useDirectPay } from "./modules/useDirectPay";
import { useEscrow } from "./modules/useEscrow";
@@ -45,7 +45,7 @@ export const useConfirmNota = ({ onSuccess }: Props) => {
  const transferWei =
    notaFormValues.mode === "invoice" ? BigNumber.from(0) : amountWei;

  const { refreshWithDelay } = useCheqContext();
  const { refreshWithDelay } = useNotaContext();

  const tokenAddress = useMemo(() => {
    switch (notaFormValues.token) {
@@ -92,11 +92,11 @@ export const useConfirmNota = ({ onSuccess }: Props) => {
    token?.functions,
  ]);

  const { writeCheq: writeDirectPayCheq } = useDirectPay();
  const { write: writeDirectPay } = useDirectPay();

  const { writeCheq: writeEscrowCheq } = useEscrow();
  const { write: writeEscrow } = useEscrow();

  const { writeCheq: writeCrosschain } = useAxelarBridge();
  const { write: writeCrosschain } = useAxelarBridge();

  const approveAmount = useCallback(async () => {
    // Disabling infinite approvals until audit it complete
@@ -143,7 +143,7 @@ export const useConfirmNota = ({ onSuccess }: Props) => {
                imageUrl: notaFormValues.imageUrl ?? "",
              });
            } else {
              txHash = await writeDirectPayCheq({
              txHash = await writeDirectPay({
                dueDate: notaFormValues.dueDate,
                tokenAddress,
                amountWei,
@@ -158,7 +158,7 @@ export const useConfirmNota = ({ onSuccess }: Props) => {
            break;

          case "escrow":
            txHash = await writeEscrowCheq({
            txHash = await writeEscrow({
              tokenAddress,
              amountWei,
              address: notaFormValues.address,
@@ -189,7 +189,7 @@ export const useConfirmNota = ({ onSuccess }: Props) => {
        const message =
          notaFormValues.mode === "invoice"
            ? "Invoice created"
            : "Cheq created";
            : "Nota created";
        toast({
          title: "Transaction succeeded",
          description: message,
@@ -230,11 +230,11 @@ export const useConfirmNota = ({ onSuccess }: Props) => {
    toast,
    refreshWithDelay,
    onSuccess,
    writeEscrowCheq,
    writeEscrow,
    tokenAddress,
    transferWei,
    writeCrosschain,
    writeDirectPayCheq,
    writeDirectPay,
    sendEmail,
  ]);

 4  
frontend/hooks/useCurrencyDisplayName.ts
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -1,13 +1,13 @@
import { useCallback } from "react";
import { CheqCurrency } from "../components/designSystem/CurrencyIcon";
import { NotaCurrency } from "../components/designSystem/CurrencyIcon";
import { useBlockchainData } from "../context/BlockchainDataProvider";
import { deployedChains } from "../context/chainInfo";

export const useCurrencyDisplayName = () => {
  const { blockchainState } = useBlockchainData();

  const displayNameForCurrency = useCallback(
    (currency: CheqCurrency, sourceChainId?: string) => {
    (currency: NotaCurrency, sourceChainId?: string) => {
      if (sourceChainId) {
        return deployedChains[sourceChainId].nativeCurrency.symbol;
      }
  147  
frontend/hooks/useCheqs.tsx → frontend/hooks/useNotas.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -1,22 +1,22 @@
import { ApolloClient, gql, InMemoryCache } from "@apollo/client";
import { BigNumber } from "ethers";
import { useCallback, useEffect, useMemo, useState } from "react";
import { CheqCurrency } from "../components/designSystem/CurrencyIcon";
import { NotaCurrency } from "../components/designSystem/CurrencyIcon";
import { useBlockchainData } from "../context/BlockchainDataProvider";
import {
  chainInfoForChainId,
  chainNumberToChainHex,
} from "../context/chainInfo";

interface Props {
  cheqField: string;
  notaField: string;
}

export interface CheqDates {
export interface NotaDates {
  created: Date;
}

export interface CheqTransaction {
export interface NotaTransaction {
  date: Date;
  hash: string;
}
@@ -42,17 +42,17 @@ export interface DirectPayModuleData {
  module: "direct";
}

export interface Cheq {
export interface Nota {
  id: string;
  amount: number;
  amountRaw: BigNumber;
  sender: string;
  receiver: string;
  owner: string;
  token: CheqCurrency;
  token: NotaCurrency;
  isInvoice: boolean;
  createdTransaction: CheqTransaction;
  fundedTransaction: CheqTransaction | null;
  createdTransaction: NotaTransaction;
  fundedTransaction: NotaTransaction | null;
  isPayer: boolean;
  uri: string;
  payer: string;
@@ -72,21 +72,21 @@ const convertExponent = (amountExact: number) => {
  return Number(BigInt(amountExact) / BigInt(10 ** 16)) / 100;
};

export const useCheqs = ({ cheqField }: Props) => {
export const useNotas = ({ notaField }: Props) => {
  const { blockchainState } = useBlockchainData();
  const account = blockchainState.account;
  const [cheqsReceived, setCheqReceived] = useState<Cheq[] | undefined>(
  const [notasReceived, setNotasReceived] = useState<Nota[] | undefined>(
    undefined
  );
  const [cheqsSent, setCheqsSent] = useState<Cheq[] | undefined>(undefined);
  const [cheqsInspected, setCheqsInspected] = useState<Cheq[] | undefined>(
  const [notasSent, setNotaSent] = useState<Nota[] | undefined>(undefined);
  const [notasInspected, setNotasInspected] = useState<Nota[] | undefined>(
    undefined
  );

  const [isLoading, setIsLoading] = useState(false);

  const currencyForTokenId = useCallback(
    (tokenAddress: string): CheqCurrency => {
    (tokenAddress: string): NotaCurrency => {
      switch (tokenAddress) {
        case blockchainState.dai?.address.toLowerCase():
          return "DAI";
@@ -100,42 +100,42 @@ export const useCheqs = ({ cheqField }: Props) => {
  );

  const mapField = useCallback(
    (gqlCheq: any) => {
      const createdTx = gqlCheq.createdTransaction.id;
    (gqlNota: any) => {
      const createdTx = gqlNota.createdTransaction.id;

      const isInvoice = gqlCheq.moduleData.isInvoice;
      const isInvoice = gqlNota.moduleData.isInvoice;

      const fundedDate = gqlCheq.moduleData.fundedTimestamp
        ? new Date(Number(gqlCheq.moduleData.fundedTimestamp) * 1000)
      const fundedDate = gqlNota.moduleData.fundedTimestamp
        ? new Date(Number(gqlNota.moduleData.fundedTimestamp) * 1000)
        : null;

      const fundedTx = gqlCheq.moduleData.fundedTransaction
        ? gqlCheq.moduleData.fundedTransaction.id
      const fundedTx = gqlNota.moduleData.fundedTransaction
        ? gqlNota.moduleData.fundedTransaction.id
        : null;

      const payer = isInvoice
        ? (gqlCheq.receiver.id as string)
        : (gqlCheq.sender.id as string);
        ? (gqlNota.receiver.id as string)
        : (gqlNota.sender.id as string);

      const payee = isInvoice
        ? (gqlCheq.sender.id as string)
        : (gqlCheq.receiver.id as string);
        ? (gqlNota.sender.id as string)
        : (gqlNota.receiver.id as string);

      const isPayer = payer === blockchainState.account.toLowerCase();

      const isInspector =
        gqlCheq.inspector?.id === blockchainState.account.toLowerCase();
        gqlNota.inspector?.id === blockchainState.account.toLowerCase();

      let dueDate: Date | undefined = undefined;

      if (gqlCheq.moduleData.dueDate) {
        dueDate = new Date(Number(gqlCheq.moduleData.dueDate) * 1000);
      if (gqlNota.moduleData.dueDate) {
        dueDate = new Date(Number(gqlNota.moduleData.dueDate) * 1000);
      }

      let moduleData: EscrowModuleData | DirectPayModuleData;

      if (gqlCheq.moduleData.__typename === "DirectPayData") {
        const status = gqlCheq.moduleData.status;
      if (gqlNota.moduleData.__typename === "DirectPayData") {
        const status = gqlNota.moduleData.status;
        let viewerStatus: DirectPayStatus = "awaiting_payment";
        if (status === "AWAITING_PAYMENT") {
          if (isPayer) {
@@ -147,8 +147,8 @@ export const useCheqs = ({ cheqField }: Props) => {
          viewerStatus = "paid";
        }
        moduleData = { module: "direct", status: viewerStatus };
      } else if (gqlCheq.moduleData.__typename === "ReversiblePaymentData") {
        const status = gqlCheq.moduleData.status;
      } else if (gqlNota.moduleData.__typename === "ReversiblePaymentData") {
        const status = gqlNota.moduleData.status;
        let viewerStatus: EscrowStatus = "awaiting_escrow";
        switch (status) {
          case "AWAITING_ESCROW":
@@ -174,33 +174,33 @@ export const useCheqs = ({ cheqField }: Props) => {
        moduleData = {
          module: "escrow",
          status: viewerStatus,
          isSelfSigned: gqlCheq.moduleData.isSelfSigned,
          isSelfSigned: gqlNota.moduleData.isSelfSigned,
        };
      }

      const sourceChainHex = gqlCheq.moduleData.sourceChain
        ? chainNumberToChainHex(Number(gqlCheq.moduleData.sourceChain))
      const sourceChainHex = gqlNota.moduleData.sourceChain
        ? chainNumberToChainHex(Number(gqlNota.moduleData.sourceChain))
        : undefined;

      const sourceChainName = gqlCheq.moduleData.sourceChain
        ? chainInfoForChainId(Number(gqlCheq.moduleData.sourceChain))
      const sourceChainName = gqlNota.moduleData.sourceChain
        ? chainInfoForChainId(Number(gqlNota.moduleData.sourceChain))
            .displayName
        : undefined;

      const destChain = gqlCheq.moduleData.sourceChain
        ? chainInfoForChainId(Number(gqlCheq.moduleData.destChain)).displayName
      const destChain = gqlNota.moduleData.sourceChain
        ? chainInfoForChainId(Number(gqlNota.moduleData.destChain)).displayName
        : undefined;

      return {
        id: gqlCheq.id as string,
        amount: convertExponent(gqlCheq.moduleData.amount as number),
        amountRaw: BigNumber.from(gqlCheq.moduleData.amount),
        token: currencyForTokenId(gqlCheq.erc20.id),
        receiver: gqlCheq.receiver.id as string,
        sender: gqlCheq.sender.id as string,
        owner: gqlCheq.owner.id as string,
        id: gqlNota.id as string,
        amount: convertExponent(gqlNota.moduleData.amount as number),
        amountRaw: BigNumber.from(gqlNota.moduleData.amount),
        token: currencyForTokenId(gqlNota.erc20.id),
        receiver: gqlNota.receiver.id as string,
        sender: gqlNota.sender.id as string,
        owner: gqlNota.owner.id as string,
        createdTransaction: {
          date: new Date(Number(gqlCheq.timestamp) * 1000),
          date: new Date(Number(gqlNota.timestamp) * 1000),
          hash: createdTx,
        },
        fundedTransaction:
@@ -211,17 +211,17 @@ export const useCheqs = ({ cheqField }: Props) => {
              }
            : null,
        isInvoice,
        uri: gqlCheq.uri,
        uri: gqlNota.uri,
        isPayer,
        payer,
        payee,
        dueDate,
        moduleData,
        inspector: gqlCheq.inspector
          ? (gqlCheq.inspector?.id as string)
        inspector: gqlNota.inspector
          ? (gqlNota.inspector?.id as string)
          : undefined,
        isInspector,
        isCrossChain: gqlCheq.moduleData.isCrossChain,
        isCrossChain: gqlNota.moduleData.isCrossChain,
        sourceChainName,
        destChain,
        sourceChainHex,
@@ -298,6 +298,7 @@ export const useCheqs = ({ cheqField }: Props) => {
      `;

      // TODO: pagination
      // TODO: remove references to cheq from the graph schema
      const tokenQuery = `
      query accounts($account: String ){
        accounts(where: { id: $account }, first: 1)  {
@@ -328,22 +329,22 @@ export const useCheqs = ({ cheqField }: Props) => {
        .then((data) => {
          console.log({ data });
          if (data["data"]["accounts"][0]) {
            const gqlCheqsSent = data["data"]["accounts"][0][
            const gqlNotasSent = data["data"]["accounts"][0][
              "cheqsSent"
            ] as any[];
            const gqlCheqsReceived = data["data"]["accounts"][0][
            const gqlNotasReceived = data["data"]["accounts"][0][
              "cheqsReceived"
            ] as any[];
            const gqlCheqsInspected = data["data"]["accounts"][0][
            const gqlNotasInspected = data["data"]["accounts"][0][
              "cheqsInspected"
            ] as any[];
            setCheqsSent(gqlCheqsSent.map(mapField));
            setCheqReceived(gqlCheqsReceived.map(mapField));
            setCheqsInspected(gqlCheqsInspected.map(mapField));
            setNotaSent(gqlNotasSent.map(mapField));
            setNotasReceived(gqlNotasReceived.map(mapField));
            setNotasInspected(gqlNotasInspected.map(mapField));
          } else {
            setCheqsSent([]);
            setCheqReceived([]);
            setCheqsInspected([]);
            setNotaSent([]);
            setNotasReceived([]);
            setNotasInspected([]);
          }
          setIsLoading(false);
        })
@@ -358,27 +359,27 @@ export const useCheqs = ({ cheqField }: Props) => {
    refresh();
  }, [refresh, account]);

  const cheqs = useMemo(() => {
  const notas = useMemo(() => {
    if (
      cheqsReceived === undefined ||
      cheqsSent === undefined ||
      cheqsInspected === undefined ||
      notasReceived === undefined ||
      notasSent === undefined ||
      notasInspected === undefined ||
      isLoading
    ) {
      return undefined;
    }
    const nonSelfSigned = cheqsInspected.filter(
      (cheq: Cheq) =>
        cheq.moduleData.module === "escrow" && !cheq.moduleData.isSelfSigned
    const nonSelfSigned = notasInspected.filter(
      (nota: Nota) =>
        nota.moduleData.module === "escrow" && !nota.moduleData.isSelfSigned
    );
    switch (cheqField) {
    switch (notaField) {
      case "cheqsSent":
        return cheqsSent;
        return notasSent;
      case "cheqsReceived":
        return cheqsReceived;
        return notasReceived;
      default:
        return cheqsReceived
          .concat(cheqsSent)
        return notasReceived
          .concat(notasSent)
          .concat(nonSelfSigned)
          .sort((a, b) => {
            return (
@@ -387,7 +388,7 @@ export const useCheqs = ({ cheqField }: Props) => {
            );
          });
    }
  }, [cheqField, cheqsInspected, cheqsReceived, cheqsSent, isLoading]);
  }, [notaField, notasInspected, notasReceived, notasSent, isLoading]);

  return { cheqs, refresh };
  return { notas, refresh };
};
  6  
frontend/hooks/useUploadNote.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -1,9 +1,9 @@
import axios from "axios";
import { useCallback } from "react";

const CHEQ_NOTE_SERVICE_URL_LOCAL = "http://127.0.0.1:3001/lighthouse";
const METADATA_SERVICE_URL_LOCAL = "http://127.0.0.1:3001/lighthouse";

const CHEQ_NOTE_SERVICE = "https://denota.klymr.me/nft-lighthouse";
const METADATA_SERVICE = "https://denota.klymr.me/nft-lighthouse";

interface NotaMetadata {
  desc?: string;
@@ -46,7 +46,7 @@ export const useUploadMetadata = () => {
    }

    try {
      const resp = await axios.post(CHEQ_NOTE_SERVICE, notaFormValues, config);
      const resp = await axios.post(METADATA_SERVICE, notaFormValues, config);
      console.log(resp.data);
      return {
        ipfsHash: resp.data.key as string,
  6  
frontend/pages/_app.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -4,8 +4,8 @@ import { AppProps } from "next/app";
import Head from "next/head";
import SidebarNav from "../components/nav/SidebarNav";
import { BlockchainDataProvider } from "../context/BlockchainDataProvider";
import { CheqsProvider } from "../context/CheqsContext";
import GoogleAnalytics from "../context/GoogleAnalytics";
import { NotasProvider } from "../context/NotasContext";
import customTheme from "../theme";

function MyApp({ Component, pageProps }: AppProps) {
@@ -21,13 +21,13 @@ function MyApp({ Component, pageProps }: AppProps) {
      <GoogleAnalytics measurementId="G-RX5F5Q2B8D" />
      <ChakraProvider theme={customTheme} resetCSS={true}>
        <BlockchainDataProvider>
          <CheqsProvider>
          <NotasProvider>
            <Box minH="100vh" bgGradient="linear(to-r, brand.400, brand.500)">
              <SidebarNav>
                <Component {...pageProps} />
              </SidebarNav>
            </Box>
          </CheqsProvider>
          </NotasProvider>
        </BlockchainDataProvider>
      </ChakraProvider>
    </>
  4  
frontend/pages/send/index.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -1,6 +1,6 @@
import { Center, Spinner } from "@chakra-ui/react";
import NewUserScreen from "../../components/dashboard/NewUserScreen";
import WriteCheqFlow from "../../components/write/WriteCheqFlow";
import WriteFlow from "../../components/write/WriteFlow";
import { WrongChain } from "../../components/WrongChain";
import { useBlockchainData } from "../../context/BlockchainDataProvider";

@@ -24,7 +24,7 @@ function SendPage() {
    <NewUserScreen />
  ) : (
    <Center w="100%" h="100%">
      <WriteCheqFlow isInvoice={true} />
      <WriteFlow isInvoice={true} />
    </Center>
  );
}
  14  
frontend/theme.tsx
Marking files as viewed can help keep track of your progress, but will not affect your submitted reviewViewed
Comment on this file
@@ -5,22 +5,22 @@ const config: ThemeConfig = {
  useSystemColorMode: false,
};

const cheqTheme = extendTheme({
const notaTheme = extendTheme({
  config,
  components: {
    Checkbox: {
      baseStyle: {
        control: {
          _checked: {
            bg: "cheqPurple.100",
            borderColor: "cheqPurple.100",
            bg: "notaPurple.100",
            borderColor: "notaPurple.100",
            color: "white",
            _hover: {
              bg: "cheqPurple.100",
              bg: "notaPurple.100",
            },
          },
          _hover: {
            borderColor: "cheqPurple.100",
            borderColor: "notaPurple.100",
          },
        },
      },
@@ -44,12 +44,12 @@ const cheqTheme = extendTheme({
      500: "#282D59",
      600: "#141A29",
    },
    cheqPurple: {
    notaPurple: {
      100: "#7476D3",
    },
  },
});

const customTheme = cheqTheme;
const customTheme = notaTheme;

export default customTheme;
Footer
© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
Remove references to cheq from frontend by soolaymahn · Pull Request #184 · denotalabs/denota 